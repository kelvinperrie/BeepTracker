@page "/user/{organisationid:int}"
@inject ILogger<UserAdmin> Logger
@inject IOrganisationService OrganisationService
@inject IBirdService BirdService
@inject IUserService UserService
@inject ISnackbar SnackbarService

<h3>Users for @Organisation.Name</h3>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateNewHandler">Make new!</MudButton>
<MudDataGrid @ref="dataGrid" Items="@Users" T="UserDto" QuickFilter="@_quickFilter" ReadOnly="false" EditMode="DataGridEditMode.Form"
            CommittedItemChanges="@CommittedItemChanges" EditTrigger="DataGridEditTrigger.OnRowClick"
            Filterable=" true" FilterMode="@_filterMode" FilterCaseSensitivity="@_caseSensitivity" >
    <ToolBarContent>
        <MudText Typo="Typo.h6">Users</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Id" Title="Id" Editable="false" />
        <PropertyColumn Property="x => x.Name" Title="Name" Editable="true" />
        <PropertyColumn Property="x => x.Username" Title="Username" Editable="true" />
        @* <PropertyColumn Property="x => x.Password" Title="Password" Editable="true" /> *@
        <PropertyColumn Property="x => x.Active" Title="Active" Editable="true">
            <EditTemplate Context="cellContext">
                <MudCheckBox T="bool" Label="Active" @bind-Value="cellContext.Item.Active"></MudCheckBox>
            </EditTemplate>
        </PropertyColumn>
        @* <PropertyColumn Property="x => x.Status.Status" Title="Status" Editable="false" >
            <EditTemplate>
                 <MudSelect @bind-Value="context.Item.StatusId" Required RequiredError="You must select a status!!!" Margin="@Margin.Dense">
                    <MudSelectItem Value="0">None</MudSelectItem>
                    <MudSelectItem Value="1">Active</MudSelectItem>
                    <MudSelectItem Value="2">Inactive</MudSelectItem>
                </MudSelect> 
            </EditTemplate>
        </PropertyColumn> *@
        <TemplateColumn Context="cellContext">
            <HeaderTemplate>Actions</HeaderTemplate>
            <CellTemplate>
                <MudButton OnClick="(() => OpenChangePasswordDialog(cellContext.Item))">Set password</MudButton>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="UserDto" />
    </PagerContent>
</MudDataGrid>

<MudDialog @bind-Visible="ChangePasswordDialogVisible">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Set password
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="EnteredPassword"></MudTextField>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="ChangePasswordCancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="ChangePasswordSubmit">Submit</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    // [SupplyParameterFromQuery]
    public int OrganisationId { get; set; }

    public OrganisationDto Organisation { get; set; }
    public IEnumerable<UserDto> Users = new List<UserDto>();
    private MudDataGrid<UserDto> dataGrid;
    DataGridFilterMode _filterMode = DataGridFilterMode.ColumnFilterMenu;
    DataGridFilterCaseSensitivity _caseSensitivity = DataGridFilterCaseSensitivity.CaseInsensitive;
    private string _searchString;   // stores the value that the user is filtering the table on

    bool ChangePasswordDialogVisible = false;
    public string? EnteredPassword { get; set; } = null;
    UserDto UserHavingPasswordUpdated { get; set; }

    void ChangePasswordSubmit()
    {
        // update the password for UserHavingPasswordUpdated
        var userId = UserHavingPasswordUpdated.Id;
        ChangePasswordDialogVisible = false;
    }
    void ChangePasswordCancel()
    {
        ChangePasswordDialogVisible = false;
    }

    private async Task OpenChangePasswordDialog(UserDto userDto)
    {
        UserHavingPasswordUpdated = userDto;

        DialogOptions dialogOptions = new DialogOptions() { CloseOnEscapeKey = true };

        EnteredPassword = string.Empty;

        ChangePasswordDialogVisible = true;

        //SetPasswordDialog.ShowAsync("Set password", dialogOptions);

        //Data dataToPass = new() { Name = "John", Age = 40 };
        //DialogParameters dialogParamters = new()
        //    {
        //        ["PassedData"] = dataToPass
        //    };
        //var dialog = await DialogService.ShowAsync<CustomDialog>("Custom Dialog", dialogParamters, dialogOptions);
        //var result = await dialog.Result;
        //if (!result.Canceled)
        //{
        //    var returnedData = await dialog.GetReturnValueAsync<Data>();
        //    _returnedData = returnedData;
        //}
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Organisation = OrganisationService.GetById(OrganisationId);

            Users = UserService.GetAllForOrganisation(OrganisationId).OrderBy(b => b.Name);
            //Logger.LogInformation($"We got {Organisations.Count()} organisations for display");

            // var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            // var user = authstate.User;
            // name = user?.Identity?.Name ?? "Unknown user";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while setting up birds page");
            SnackbarService.Add("Error while setting up birds page: " + ex.Message, Severity.Error);
        }
    }

    private Func<UserDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Username.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        // if (x.ShortName != null && x.ShortName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
        //     return true;

        return false;
    };

    void CommittedItemChanges(UserDto item)
    {
        try
        {
            UserService.Update(item);

            Logger.LogInformation($"Updated user! The new info is {item}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error while saving user changes: {item}");
            SnackbarService.Add("Error while saving user changes: " + ex.Message, Severity.Error);
        }
    }

    /// <summary>
    /// creates a new item - shows the dialog with no data
    /// </summary>
    public void CreateNewHandler()
    {
        var newUser = new UserDto
        {
            OrganisationId = OrganisationId
        };
        dataGrid.SetEditingItemAsync(newUser);
    }
}
