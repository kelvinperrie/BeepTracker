@page "/organisations"
@using MudBlazor
@inject ILogger<OrganisationAdmin> Logger
@inject IOrganisationService OrganisationService
@inject ISnackbar SnackbarService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager


<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateNewHandler">Make new!</MudButton>
<MudDataGrid @ref="dataGrid" Items="@Organisations" T="OrganisationDto" QuickFilter="@_quickFilter" ReadOnly="false" EditMode="DataGridEditMode.Form"
             CommittedItemChanges="@CommittedItemChanges" EditTrigger="DataGridEditTrigger.OnRowClick ">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Organisations</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Id" Title="Id" Editable="false" />
        <PropertyColumn Property="x => x.Name" Title="Name" Editable="true" />
        <TemplateColumn>
            <HeaderTemplate>Birds</HeaderTemplate>
            <CellTemplate>
                <MudLink Href="@($"/birds/{@context.Item.Id}")">view birds</MudLink>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn>
            <HeaderTemplate>Users</HeaderTemplate>
            <CellTemplate>
                <MudLink Href="@($"/user/{@context.Item.Id}")">view users</MudLink>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="OrganisationDto" />
    </PagerContent>
</MudDataGrid>

@code {
    IEnumerable<OrganisationDto> Organisations = new List<OrganisationDto>();
    private MudDataGrid<OrganisationDto> dataGrid;
    private string _searchString;   // stores the value that the user is filtering the table on

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Organisations = OrganisationService.GetAll().OrderBy(o => o.Name);
            Logger.LogInformation($"We got {Organisations.Count()} organisations for display");

            // var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            // var user = authstate.User;
            // name = user?.Identity?.Name ?? "Unknown user";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while setting up ward list page");
            SnackbarService.Add("Error while setting up ward list page: " + ex.Message, Severity.Error);
        }
    }

    private Func<OrganisationDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

    // if (x.HospitalId.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
    //     return true;

    // if (x.ShortName != null && x.ShortName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
    //     return true;

        return false;
    };

    void CommittedItemChanges(OrganisationDto item)
    {
        try
        {
            OrganisationService.Update(item);

            Logger.LogInformation($"Updated organisation! The new info is {item}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error while saving organisation changes: {item}");
            SnackbarService.Add("Error while saving organisation changes: " + ex.Message, Severity.Error);
        }
    }

    /// <summary>
    /// creates a new item - shows the dialog with no data
    /// </summary>
    public void CreateNewHandler()
    {
        dataGrid.SetEditingItemAsync(new OrganisationDto());
    }
}
